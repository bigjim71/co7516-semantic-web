package com.boating.cs;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Harbour <br>
 * @version generated on Mon Apr 16 16:18:00 CEST 2018 by fh231
 */

public interface Harbour extends Haven {

    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#acceptsBoatType
     */
     
    /**
     * Gets all property values for the acceptsBoatType property.<p>
     * 
     * @returns a collection of values for the acceptsBoatType property.
     */
    Collection<? extends WrappedIndividual> getAcceptsBoatType();

    /**
     * Checks if the class has a acceptsBoatType property value.<p>
     * 
     * @return true if there is a acceptsBoatType property value.
     */
    boolean hasAcceptsBoatType();

    /**
     * Adds a acceptsBoatType property value.<p>
     * 
     * @param newAcceptsBoatType the acceptsBoatType property value to be added
     */
    void addAcceptsBoatType(WrappedIndividual newAcceptsBoatType);

    /**
     * Removes a acceptsBoatType property value.<p>
     * 
     * @param oldAcceptsBoatType the acceptsBoatType property value to be removed.
     */
    void removeAcceptsBoatType(WrappedIndividual oldAcceptsBoatType);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#connectsTo
     */
     
    /**
     * Gets all property values for the connectsTo property.<p>
     * 
     * @returns a collection of values for the connectsTo property.
     */
    Collection<? extends Haven> getConnectsTo();

    /**
     * Checks if the class has a connectsTo property value.<p>
     * 
     * @return true if there is a connectsTo property value.
     */
    boolean hasConnectsTo();

    /**
     * Adds a connectsTo property value.<p>
     * 
     * @param newConnectsTo the connectsTo property value to be added
     */
    void addConnectsTo(Haven newConnectsTo);

    /**
     * Removes a connectsTo property value.<p>
     * 
     * @param oldConnectsTo the connectsTo property value to be removed.
     */
    void removeConnectsTo(Haven oldConnectsTo);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#havenBerths
     */
     
    /**
     * Gets all property values for the havenBerths property.<p>
     * 
     * @returns a collection of values for the havenBerths property.
     */
    Collection<? extends Berth> getHavenBerths();

    /**
     * Checks if the class has a havenBerths property value.<p>
     * 
     * @return true if there is a havenBerths property value.
     */
    boolean hasHavenBerths();

    /**
     * Adds a havenBerths property value.<p>
     * 
     * @param newHavenBerths the havenBerths property value to be added
     */
    void addHavenBerths(Berth newHavenBerths);

    /**
     * Removes a havenBerths property value.<p>
     * 
     * @param oldHavenBerths the havenBerths property value to be removed.
     */
    void removeHavenBerths(Berth oldHavenBerths);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#berthCapacity
     */
     
    /**
     * Gets all property values for the berthCapacity property.<p>
     * 
     * @returns a collection of values for the berthCapacity property.
     */
    Collection<? extends Integer> getBerthCapacity();

    /**
     * Checks if the class has a berthCapacity property value.<p>
     * 
     * @return true if there is a berthCapacity property value.
     */
    boolean hasBerthCapacity();

    /**
     * Adds a berthCapacity property value.<p>
     * 
     * @param newBerthCapacity the berthCapacity property value to be added
     */
    void addBerthCapacity(Integer newBerthCapacity);

    /**
     * Removes a berthCapacity property value.<p>
     * 
     * @param oldBerthCapacity the berthCapacity property value to be removed.
     */
    void removeBerthCapacity(Integer oldBerthCapacity);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#berthsAvailable
     */
     
    /**
     * Gets all property values for the berthsAvailable property.<p>
     * 
     * @returns a collection of values for the berthsAvailable property.
     */
    Collection<? extends Integer> getBerthsAvailable();

    /**
     * Checks if the class has a berthsAvailable property value.<p>
     * 
     * @return true if there is a berthsAvailable property value.
     */
    boolean hasBerthsAvailable();

    /**
     * Adds a berthsAvailable property value.<p>
     * 
     * @param newBerthsAvailable the berthsAvailable property value to be added
     */
    void addBerthsAvailable(Integer newBerthsAvailable);

    /**
     * Removes a berthsAvailable property value.<p>
     * 
     * @param oldBerthsAvailable the berthsAvailable property value to be removed.
     */
    void removeBerthsAvailable(Integer oldBerthsAvailable);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#havenName
     */
     
    /**
     * Gets all property values for the havenName property.<p>
     * 
     * @returns a collection of values for the havenName property.
     */
    Collection<? extends String> getHavenName();

    /**
     * Checks if the class has a havenName property value.<p>
     * 
     * @return true if there is a havenName property value.
     */
    boolean hasHavenName();

    /**
     * Adds a havenName property value.<p>
     * 
     * @param newHavenName the havenName property value to be added
     */
    void addHavenName(String newHavenName);

    /**
     * Removes a havenName property value.<p>
     * 
     * @param oldHavenName the havenName property value to be removed.
     */
    void removeHavenName(String oldHavenName);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
