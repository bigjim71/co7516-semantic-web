package com.boating.cs;

import com.boating.cs.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: OntFactory<br>
 * @version generated on Mon Apr 16 16:18:00 CEST 2018 by fh231
 */
public class OntFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public OntFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public OntFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Address
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Address", Address.class, DefaultAddress.class);
    }

    /**
     * Creates an instance of type Address.  Modifies the underlying ontology.
     */
    public Address createAddress(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADDRESS, DefaultAddress.class);
    }

    /**
     * Gets an instance of type Address with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Address getAddress(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADDRESS, DefaultAddress.class);
    }

    /**
     * Gets all instances of Address from the ontology.
     */
    public Collection<? extends Address> getAllAddressInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADDRESS, DefaultAddress.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Berth
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Berth", Berth.class, DefaultBerth.class);
    }

    /**
     * Creates an instance of type Berth.  Modifies the underlying ontology.
     */
    public Berth createBerth(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERTH, DefaultBerth.class);
    }

    /**
     * Gets an instance of type Berth with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Berth getBerth(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERTH, DefaultBerth.class);
    }

    /**
     * Gets all instances of Berth from the ontology.
     */
    public Collection<? extends Berth> getAllBerthInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERTH, DefaultBerth.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Boat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Boat", Boat.class, DefaultBoat.class);
    }

    /**
     * Creates an instance of type Boat.  Modifies the underlying ontology.
     */
    public Boat createBoat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOAT, DefaultBoat.class);
    }

    /**
     * Gets an instance of type Boat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Boat getBoat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOAT, DefaultBoat.class);
    }

    /**
     * Gets all instances of Boat from the ontology.
     */
    public Collection<? extends Boat> getAllBoatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOAT, DefaultBoat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#BoatRentalProvider
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#BoatRentalProvider", BoatRentalProvider.class, DefaultBoatRentalProvider.class);
    }

    /**
     * Creates an instance of type BoatRentalProvider.  Modifies the underlying ontology.
     */
    public BoatRentalProvider createBoatRentalProvider(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOATRENTALPROVIDER, DefaultBoatRentalProvider.class);
    }

    /**
     * Gets an instance of type BoatRentalProvider with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoatRentalProvider getBoatRentalProvider(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOATRENTALPROVIDER, DefaultBoatRentalProvider.class);
    }

    /**
     * Gets all instances of BoatRentalProvider from the ontology.
     */
    public Collection<? extends BoatRentalProvider> getAllBoatRentalProviderInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOATRENTALPROVIDER, DefaultBoatRentalProvider.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CabinCruiser
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CabinCruiser", CabinCruiser.class, DefaultCabinCruiser.class);
    }

    /**
     * Creates an instance of type CabinCruiser.  Modifies the underlying ontology.
     */
    public CabinCruiser createCabinCruiser(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CABINCRUISER, DefaultCabinCruiser.class);
    }

    /**
     * Gets an instance of type CabinCruiser with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CabinCruiser getCabinCruiser(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CABINCRUISER, DefaultCabinCruiser.class);
    }

    /**
     * Gets all instances of CabinCruiser from the ontology.
     */
    public Collection<? extends CabinCruiser> getAllCabinCruiserInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CABINCRUISER, DefaultCabinCruiser.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialBoat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialBoat", CommercialBoat.class, DefaultCommercialBoat.class);
    }

    /**
     * Creates an instance of type CommercialBoat.  Modifies the underlying ontology.
     */
    public CommercialBoat createCommercialBoat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALBOAT, DefaultCommercialBoat.class);
    }

    /**
     * Gets an instance of type CommercialBoat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CommercialBoat getCommercialBoat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALBOAT, DefaultCommercialBoat.class);
    }

    /**
     * Gets all instances of CommercialBoat from the ontology.
     */
    public Collection<? extends CommercialBoat> getAllCommercialBoatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMERCIALBOAT, DefaultCommercialBoat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialBoatRentalProvider
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialBoatRentalProvider", CommercialBoatRentalProvider.class, DefaultCommercialBoatRentalProvider.class);
    }

    /**
     * Creates an instance of type CommercialBoatRentalProvider.  Modifies the underlying ontology.
     */
    public CommercialBoatRentalProvider createCommercialBoatRentalProvider(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALBOATRENTALPROVIDER, DefaultCommercialBoatRentalProvider.class);
    }

    /**
     * Gets an instance of type CommercialBoatRentalProvider with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CommercialBoatRentalProvider getCommercialBoatRentalProvider(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALBOATRENTALPROVIDER, DefaultCommercialBoatRentalProvider.class);
    }

    /**
     * Gets all instances of CommercialBoatRentalProvider from the ontology.
     */
    public Collection<? extends CommercialBoatRentalProvider> getAllCommercialBoatRentalProviderInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMERCIALBOATRENTALPROVIDER, DefaultCommercialBoatRentalProvider.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialRoute
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#CommercialRoute", CommercialRoute.class, DefaultCommercialRoute.class);
    }

    /**
     * Creates an instance of type CommercialRoute.  Modifies the underlying ontology.
     */
    public CommercialRoute createCommercialRoute(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALROUTE, DefaultCommercialRoute.class);
    }

    /**
     * Gets an instance of type CommercialRoute with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CommercialRoute getCommercialRoute(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMERCIALROUTE, DefaultCommercialRoute.class);
    }

    /**
     * Gets all instances of CommercialRoute from the ontology.
     */
    public Collection<? extends CommercialRoute> getAllCommercialRouteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMERCIALROUTE, DefaultCommercialRoute.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Contact
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Contact", Contact.class, DefaultContact.class);
    }

    /**
     * Creates an instance of type Contact.  Modifies the underlying ontology.
     */
    public Contact createContact(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }

    /**
     * Gets an instance of type Contact with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Contact getContact(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }

    /**
     * Gets all instances of Contact from the ontology.
     */
    public Collection<? extends Contact> getAllContactInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTACT, DefaultContact.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Cutter
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Cutter", Cutter.class, DefaultCutter.class);
    }

    /**
     * Creates an instance of type Cutter.  Modifies the underlying ontology.
     */
    public Cutter createCutter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CUTTER, DefaultCutter.class);
    }

    /**
     * Gets an instance of type Cutter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cutter getCutter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CUTTER, DefaultCutter.class);
    }

    /**
     * Gets all instances of Cutter from the ontology.
     */
    public Collection<? extends Cutter> getAllCutterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CUTTER, DefaultCutter.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Dinghy
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Dinghy", Dinghy.class, DefaultDinghy.class);
    }

    /**
     * Creates an instance of type Dinghy.  Modifies the underlying ontology.
     */
    public Dinghy createDinghy(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DINGHY, DefaultDinghy.class);
    }

    /**
     * Gets an instance of type Dinghy with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dinghy getDinghy(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DINGHY, DefaultDinghy.class);
    }

    /**
     * Gets all instances of Dinghy from the ontology.
     */
    public Collection<? extends Dinghy> getAllDinghyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DINGHY, DefaultDinghy.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Dragon
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Dragon", Dragon.class, DefaultDragon.class);
    }

    /**
     * Creates an instance of type Dragon.  Modifies the underlying ontology.
     */
    public Dragon createDragon(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRAGON, DefaultDragon.class);
    }

    /**
     * Gets an instance of type Dragon with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dragon getDragon(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRAGON, DefaultDragon.class);
    }

    /**
     * Gets all instances of Dragon from the ontology.
     */
    public Collection<? extends Dragon> getAllDragonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRAGON, DefaultDragon.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Email
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Email", Email.class, DefaultEmail.class);
    }

    /**
     * Creates an instance of type Email.  Modifies the underlying ontology.
     */
    public Email createEmail(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EMAIL, DefaultEmail.class);
    }

    /**
     * Gets an instance of type Email with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Email getEmail(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EMAIL, DefaultEmail.class);
    }

    /**
     * Gets all instances of Email from the ontology.
     */
    public Collection<? extends Email> getAllEmailInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EMAIL, DefaultEmail.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Engine
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Engine", Engine.class, DefaultEngine.class);
    }

    /**
     * Creates an instance of type Engine.  Modifies the underlying ontology.
     */
    public Engine createEngine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }

    /**
     * Gets an instance of type Engine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Engine getEngine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }

    /**
     * Gets all instances of Engine from the ontology.
     */
    public Collection<? extends Engine> getAllEngineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENGINE, DefaultEngine.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Ferry
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Ferry", Ferry.class, DefaultFerry.class);
    }

    /**
     * Creates an instance of type Ferry.  Modifies the underlying ontology.
     */
    public Ferry createFerry(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FERRY, DefaultFerry.class);
    }

    /**
     * Gets an instance of type Ferry with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ferry getFerry(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FERRY, DefaultFerry.class);
    }

    /**
     * Gets all instances of Ferry from the ontology.
     */
    public Collection<? extends Ferry> getAllFerryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FERRY, DefaultFerry.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Harbour
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Harbour", Harbour.class, DefaultHarbour.class);
    }

    /**
     * Creates an instance of type Harbour.  Modifies the underlying ontology.
     */
    public Harbour createHarbour(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HARBOUR, DefaultHarbour.class);
    }

    /**
     * Gets an instance of type Harbour with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Harbour getHarbour(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HARBOUR, DefaultHarbour.class);
    }

    /**
     * Gets all instances of Harbour from the ontology.
     */
    public Collection<? extends Harbour> getAllHarbourInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HARBOUR, DefaultHarbour.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Haven
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Haven", Haven.class, DefaultHaven.class);
    }

    /**
     * Creates an instance of type Haven.  Modifies the underlying ontology.
     */
    public Haven createHaven(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAVEN, DefaultHaven.class);
    }

    /**
     * Gets an instance of type Haven with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Haven getHaven(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAVEN, DefaultHaven.class);
    }

    /**
     * Gets all instances of Haven from the ontology.
     */
    public Collection<? extends Haven> getAllHavenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAVEN, DefaultHaven.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Hobie-Tiger
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Hobie-Tiger", Hobie_Tiger.class, DefaultHobie_Tiger.class);
    }

    /**
     * Creates an instance of type Hobie_Tiger.  Modifies the underlying ontology.
     */
    public Hobie_Tiger createHobie_Tiger(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOBIE_TIGER, DefaultHobie_Tiger.class);
    }

    /**
     * Gets an instance of type Hobie_Tiger with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hobie_Tiger getHobie_Tiger(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOBIE_TIGER, DefaultHobie_Tiger.class);
    }

    /**
     * Gets all instances of Hobie_Tiger from the ontology.
     */
    public Collection<? extends Hobie_Tiger> getAllHobie_TigerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOBIE_TIGER, DefaultHobie_Tiger.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Hobie-Wildcat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Hobie-Wildcat", Hobie_Wildcat.class, DefaultHobie_Wildcat.class);
    }

    /**
     * Creates an instance of type Hobie_Wildcat.  Modifies the underlying ontology.
     */
    public Hobie_Wildcat createHobie_Wildcat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOBIE_WILDCAT, DefaultHobie_Wildcat.class);
    }

    /**
     * Gets an instance of type Hobie_Wildcat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hobie_Wildcat getHobie_Wildcat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOBIE_WILDCAT, DefaultHobie_Wildcat.class);
    }

    /**
     * Gets all instances of Hobie_Wildcat from the ontology.
     */
    public Collection<? extends Hobie_Wildcat> getAllHobie_WildcatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOBIE_WILDCAT, DefaultHobie_Wildcat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Laser
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Laser", Laser.class, DefaultLaser.class);
    }

    /**
     * Creates an instance of type Laser.  Modifies the underlying ontology.
     */
    public Laser createLaser(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LASER, DefaultLaser.class);
    }

    /**
     * Gets an instance of type Laser with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Laser getLaser(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LASER, DefaultLaser.class);
    }

    /**
     * Gets all instances of Laser from the ontology.
     */
    public Collection<? extends Laser> getAllLaserInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LASER, DefaultLaser.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#LeisureBoatRentalProvider
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#LeisureBoatRentalProvider", LeisureBoatRentalProvider.class, DefaultLeisureBoatRentalProvider.class);
    }

    /**
     * Creates an instance of type LeisureBoatRentalProvider.  Modifies the underlying ontology.
     */
    public LeisureBoatRentalProvider createLeisureBoatRentalProvider(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEISUREBOATRENTALPROVIDER, DefaultLeisureBoatRentalProvider.class);
    }

    /**
     * Gets an instance of type LeisureBoatRentalProvider with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LeisureBoatRentalProvider getLeisureBoatRentalProvider(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEISUREBOATRENTALPROVIDER, DefaultLeisureBoatRentalProvider.class);
    }

    /**
     * Gets all instances of LeisureBoatRentalProvider from the ontology.
     */
    public Collection<? extends LeisureBoatRentalProvider> getAllLeisureBoatRentalProviderInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEISUREBOATRENTALPROVIDER, DefaultLeisureBoatRentalProvider.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#LeisureRoute
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#LeisureRoute", LeisureRoute.class, DefaultLeisureRoute.class);
    }

    /**
     * Creates an instance of type LeisureRoute.  Modifies the underlying ontology.
     */
    public LeisureRoute createLeisureRoute(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEISUREROUTE, DefaultLeisureRoute.class);
    }

    /**
     * Gets an instance of type LeisureRoute with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LeisureRoute getLeisureRoute(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEISUREROUTE, DefaultLeisureRoute.class);
    }

    /**
     * Gets all instances of LeisureRoute from the ontology.
     */
    public Collection<? extends LeisureRoute> getAllLeisureRouteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEISUREROUTE, DefaultLeisureRoute.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Mirror
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Mirror", Mirror.class, DefaultMirror.class);
    }

    /**
     * Creates an instance of type Mirror.  Modifies the underlying ontology.
     */
    public Mirror createMirror(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIRROR, DefaultMirror.class);
    }

    /**
     * Gets an instance of type Mirror with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mirror getMirror(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIRROR, DefaultMirror.class);
    }

    /**
     * Gets all instances of Mirror from the ontology.
     */
    public Collection<? extends Mirror> getAllMirrorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIRROR, DefaultMirror.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#MotorBoat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#MotorBoat", MotorBoat.class, DefaultMotorBoat.class);
    }

    /**
     * Creates an instance of type MotorBoat.  Modifies the underlying ontology.
     */
    public MotorBoat createMotorBoat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOTORBOAT, DefaultMotorBoat.class);
    }

    /**
     * Gets an instance of type MotorBoat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MotorBoat getMotorBoat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOTORBOAT, DefaultMotorBoat.class);
    }

    /**
     * Gets all instances of MotorBoat from the ontology.
     */
    public Collection<? extends MotorBoat> getAllMotorBoatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOTORBOAT, DefaultMotorBoat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Multihull
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Multihull", Multihull.class, DefaultMultihull.class);
    }

    /**
     * Creates an instance of type Multihull.  Modifies the underlying ontology.
     */
    public Multihull createMultihull(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MULTIHULL, DefaultMultihull.class);
    }

    /**
     * Gets an instance of type Multihull with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Multihull getMultihull(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MULTIHULL, DefaultMultihull.class);
    }

    /**
     * Gets all instances of Multihull from the ontology.
     */
    public Collection<? extends Multihull> getAllMultihullInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MULTIHULL, DefaultMultihull.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#NonCommercialBoat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#NonCommercialBoat", NonCommercialBoat.class, DefaultNonCommercialBoat.class);
    }

    /**
     * Creates an instance of type NonCommercialBoat.  Modifies the underlying ontology.
     */
    public NonCommercialBoat createNonCommercialBoat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONCOMMERCIALBOAT, DefaultNonCommercialBoat.class);
    }

    /**
     * Gets an instance of type NonCommercialBoat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonCommercialBoat getNonCommercialBoat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONCOMMERCIALBOAT, DefaultNonCommercialBoat.class);
    }

    /**
     * Gets all instances of NonCommercialBoat from the ontology.
     */
    public Collection<? extends NonCommercialBoat> getAllNonCommercialBoatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONCOMMERCIALBOAT, DefaultNonCommercialBoat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Optimist
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Optimist", Optimist.class, DefaultOptimist.class);
    }

    /**
     * Creates an instance of type Optimist.  Modifies the underlying ontology.
     */
    public Optimist createOptimist(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPTIMIST, DefaultOptimist.class);
    }

    /**
     * Gets an instance of type Optimist with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Optimist getOptimist(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPTIMIST, DefaultOptimist.class);
    }

    /**
     * Gets all instances of Optimist from the ontology.
     */
    public Collection<? extends Optimist> getAllOptimistInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPTIMIST, DefaultOptimist.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Port
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Port", Port.class, DefaultPort.class);
    }

    /**
     * Creates an instance of type Port.  Modifies the underlying ontology.
     */
    public Port createPort(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PORT, DefaultPort.class);
    }

    /**
     * Gets an instance of type Port with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Port getPort(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PORT, DefaultPort.class);
    }

    /**
     * Gets all instances of Port from the ontology.
     */
    public Collection<? extends Port> getAllPortInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PORT, DefaultPort.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Route
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Route", Route.class, DefaultRoute.class);
    }

    /**
     * Creates an instance of type Route.  Modifies the underlying ontology.
     */
    public Route createRoute(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROUTE, DefaultRoute.class);
    }

    /**
     * Gets an instance of type Route with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Route getRoute(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROUTE, DefaultRoute.class);
    }

    /**
     * Gets all instances of Route from the ontology.
     */
    public Collection<? extends Route> getAllRouteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROUTE, DefaultRoute.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#SailingBoat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#SailingBoat", SailingBoat.class, DefaultSailingBoat.class);
    }

    /**
     * Creates an instance of type SailingBoat.  Modifies the underlying ontology.
     */
    public SailingBoat createSailingBoat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SAILINGBOAT, DefaultSailingBoat.class);
    }

    /**
     * Gets an instance of type SailingBoat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SailingBoat getSailingBoat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SAILINGBOAT, DefaultSailingBoat.class);
    }

    /**
     * Gets all instances of SailingBoat from the ontology.
     */
    public Collection<? extends SailingBoat> getAllSailingBoatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SAILINGBOAT, DefaultSailingBoat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Sloop
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Sloop", Sloop.class, DefaultSloop.class);
    }

    /**
     * Creates an instance of type Sloop.  Modifies the underlying ontology.
     */
    public Sloop createSloop(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLOOP, DefaultSloop.class);
    }

    /**
     * Gets an instance of type Sloop with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sloop getSloop(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLOOP, DefaultSloop.class);
    }

    /**
     * Gets all instances of Sloop from the ontology.
     */
    public Collection<? extends Sloop> getAllSloopInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLOOP, DefaultSloop.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Telephone
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Telephone", Telephone.class, DefaultTelephone.class);
    }

    /**
     * Creates an instance of type Telephone.  Modifies the underlying ontology.
     */
    public Telephone createTelephone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TELEPHONE, DefaultTelephone.class);
    }

    /**
     * Gets an instance of type Telephone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Telephone getTelephone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TELEPHONE, DefaultTelephone.class);
    }

    /**
     * Gets all instances of Telephone from the ontology.
     */
    public Collection<? extends Telephone> getAllTelephoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TELEPHONE, DefaultTelephone.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Topcat
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Topcat", Topcat.class, DefaultTopcat.class);
    }

    /**
     * Creates an instance of type Topcat.  Modifies the underlying ontology.
     */
    public Topcat createTopcat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TOPCAT, DefaultTopcat.class);
    }

    /**
     * Gets an instance of type Topcat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Topcat getTopcat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TOPCAT, DefaultTopcat.class);
    }

    /**
     * Gets all instances of Topcat from the ontology.
     */
    public Collection<? extends Topcat> getAllTopcatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TOPCAT, DefaultTopcat.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Tornado
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Tornado", Tornado.class, DefaultTornado.class);
    }

    /**
     * Creates an instance of type Tornado.  Modifies the underlying ontology.
     */
    public Tornado createTornado(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TORNADO, DefaultTornado.class);
    }

    /**
     * Gets an instance of type Tornado with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tornado getTornado(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TORNADO, DefaultTornado.class);
    }

    /**
     * Gets all instances of Tornado from the ontology.
     */
    public Collection<? extends Tornado> getAllTornadoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TORNADO, DefaultTornado.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Trawler
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Trawler", Trawler.class, DefaultTrawler.class);
    }

    /**
     * Creates an instance of type Trawler.  Modifies the underlying ontology.
     */
    public Trawler createTrawler(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRAWLER, DefaultTrawler.class);
    }

    /**
     * Gets an instance of type Trawler with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trawler getTrawler(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRAWLER, DefaultTrawler.class);
    }

    /**
     * Gets all instances of Trawler from the ontology.
     */
    public Collection<? extends Trawler> getAllTrawlerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRAWLER, DefaultTrawler.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Tug
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Tug", Tug.class, DefaultTug.class);
    }

    /**
     * Creates an instance of type Tug.  Modifies the underlying ontology.
     */
    public Tug createTug(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TUG, DefaultTug.class);
    }

    /**
     * Gets an instance of type Tug with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tug getTug(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TUG, DefaultTug.class);
    }

    /**
     * Gets all instances of Tug from the ontology.
     */
    public Collection<? extends Tug> getAllTugInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TUG, DefaultTug.class);
    }


    /* ***************************************************
     * Class http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Yacht
     */

    {
        javaMapping.add("http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#Yacht", Yacht.class, DefaultYacht.class);
    }

    /**
     * Creates an instance of type Yacht.  Modifies the underlying ontology.
     */
    public Yacht createYacht(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YACHT, DefaultYacht.class);
    }

    /**
     * Gets an instance of type Yacht with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Yacht getYacht(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YACHT, DefaultYacht.class);
    }

    /**
     * Gets all instances of Yacht from the ontology.
     */
    public Collection<? extends Yacht> getAllYachtInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_YACHT, DefaultYacht.class);
    }


}
