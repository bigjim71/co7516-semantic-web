package com.boating.cs;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Tornado <br>
 * @version generated on Mon Apr 16 16:18:00 CEST 2018 by fh231
 */

public interface Tornado extends Multihull {

    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#boatType
     */
     
    /**
     * Gets all property values for the boatType property.<p>
     * 
     * @returns a collection of values for the boatType property.
     */
    Collection<? extends WrappedIndividual> getBoatType();

    /**
     * Checks if the class has a boatType property value.<p>
     * 
     * @return true if there is a boatType property value.
     */
    boolean hasBoatType();

    /**
     * Adds a boatType property value.<p>
     * 
     * @param newBoatType the boatType property value to be added
     */
    void addBoatType(WrappedIndividual newBoatType);

    /**
     * Removes a boatType property value.<p>
     * 
     * @param oldBoatType the boatType property value to be removed.
     */
    void removeBoatType(WrappedIndividual oldBoatType);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#isBiggerThan
     */
     
    /**
     * Gets all property values for the isBiggerThan property.<p>
     * 
     * @returns a collection of values for the isBiggerThan property.
     */
    Collection<? extends Boat> getIsBiggerThan();

    /**
     * Checks if the class has a isBiggerThan property value.<p>
     * 
     * @return true if there is a isBiggerThan property value.
     */
    boolean hasIsBiggerThan();

    /**
     * Adds a isBiggerThan property value.<p>
     * 
     * @param newIsBiggerThan the isBiggerThan property value to be added
     */
    void addIsBiggerThan(Boat newIsBiggerThan);

    /**
     * Removes a isBiggerThan property value.<p>
     * 
     * @param oldIsBiggerThan the isBiggerThan property value to be removed.
     */
    void removeIsBiggerThan(Boat oldIsBiggerThan);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#isCommercial
     */
     
    /**
     * Gets all property values for the isCommercial property.<p>
     * 
     * @returns a collection of values for the isCommercial property.
     */
    Collection<? extends WrappedIndividual> getIsCommercial();

    /**
     * Checks if the class has a isCommercial property value.<p>
     * 
     * @return true if there is a isCommercial property value.
     */
    boolean hasIsCommercial();

    /**
     * Adds a isCommercial property value.<p>
     * 
     * @param newIsCommercial the isCommercial property value to be added
     */
    void addIsCommercial(WrappedIndividual newIsCommercial);

    /**
     * Removes a isCommercial property value.<p>
     * 
     * @param oldIsCommercial the isCommercial property value to be removed.
     */
    void removeIsCommercial(WrappedIndividual oldIsCommercial);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#isLeisure
     */
     
    /**
     * Gets all property values for the isLeisure property.<p>
     * 
     * @returns a collection of values for the isLeisure property.
     */
    Collection<? extends WrappedIndividual> getIsLeisure();

    /**
     * Checks if the class has a isLeisure property value.<p>
     * 
     * @return true if there is a isLeisure property value.
     */
    boolean hasIsLeisure();

    /**
     * Adds a isLeisure property value.<p>
     * 
     * @param newIsLeisure the isLeisure property value to be added
     */
    void addIsLeisure(WrappedIndividual newIsLeisure);

    /**
     * Removes a isLeisure property value.<p>
     * 
     * @param oldIsLeisure the isLeisure property value to be removed.
     */
    void removeIsLeisure(WrappedIndividual oldIsLeisure);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#motors
     */
     
    /**
     * Gets all property values for the motors property.<p>
     * 
     * @returns a collection of values for the motors property.
     */
    Collection<? extends MotorBoat> getMotors();

    /**
     * Checks if the class has a motors property value.<p>
     * 
     * @return true if there is a motors property value.
     */
    boolean hasMotors();

    /**
     * Adds a motors property value.<p>
     * 
     * @param newMotors the motors property value to be added
     */
    void addMotors(MotorBoat newMotors);

    /**
     * Removes a motors property value.<p>
     * 
     * @param oldMotors the motors property value to be removed.
     */
    void removeMotors(MotorBoat oldMotors);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#sails
     */
     
    /**
     * Gets all property values for the sails property.<p>
     * 
     * @returns a collection of values for the sails property.
     */
    Collection<? extends SailingBoat> getSails();

    /**
     * Checks if the class has a sails property value.<p>
     * 
     * @return true if there is a sails property value.
     */
    boolean hasSails();

    /**
     * Adds a sails property value.<p>
     * 
     * @param newSails the sails property value to be added
     */
    void addSails(SailingBoat newSails);

    /**
     * Removes a sails property value.<p>
     * 
     * @param oldSails the sails property value to be removed.
     */
    void removeSails(SailingBoat oldSails);


    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#boatLength
     */
     
    /**
     * Gets all property values for the boatLength property.<p>
     * 
     * @returns a collection of values for the boatLength property.
     */
    Collection<? extends Integer> getBoatLength();

    /**
     * Checks if the class has a boatLength property value.<p>
     * 
     * @return true if there is a boatLength property value.
     */
    boolean hasBoatLength();

    /**
     * Adds a boatLength property value.<p>
     * 
     * @param newBoatLength the boatLength property value to be added
     */
    void addBoatLength(Integer newBoatLength);

    /**
     * Removes a boatLength property value.<p>
     * 
     * @param oldBoatLength the boatLength property value to be removed.
     */
    void removeBoatLength(Integer oldBoatLength);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#boatName
     */
     
    /**
     * Gets all property values for the boatName property.<p>
     * 
     * @returns a collection of values for the boatName property.
     */
    Collection<? extends String> getBoatName();

    /**
     * Checks if the class has a boatName property value.<p>
     * 
     * @return true if there is a boatName property value.
     */
    boolean hasBoatName();

    /**
     * Adds a boatName property value.<p>
     * 
     * @param newBoatName the boatName property value to be added
     */
    void addBoatName(String newBoatName);

    /**
     * Removes a boatName property value.<p>
     * 
     * @param oldBoatName the boatName property value to be removed.
     */
    void removeBoatName(String oldBoatName);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#color
     */
     
    /**
     * Gets all property values for the color property.<p>
     * 
     * @returns a collection of values for the color property.
     */
    Collection<? extends Object> getColor();

    /**
     * Checks if the class has a color property value.<p>
     * 
     * @return true if there is a color property value.
     */
    boolean hasColor();

    /**
     * Adds a color property value.<p>
     * 
     * @param newColor the color property value to be added
     */
    void addColor(Object newColor);

    /**
     * Removes a color property value.<p>
     * 
     * @param oldColor the color property value to be removed.
     */
    void removeColor(Object oldColor);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#engineSize
     */
     
    /**
     * Gets all property values for the engineSize property.<p>
     * 
     * @returns a collection of values for the engineSize property.
     */
    Collection<? extends Integer> getEngineSize();

    /**
     * Checks if the class has a engineSize property value.<p>
     * 
     * @return true if there is a engineSize property value.
     */
    boolean hasEngineSize();

    /**
     * Adds a engineSize property value.<p>
     * 
     * @param newEngineSize the engineSize property value to be added
     */
    void addEngineSize(Integer newEngineSize);

    /**
     * Removes a engineSize property value.<p>
     * 
     * @param oldEngineSize the engineSize property value to be removed.
     */
    void removeEngineSize(Integer oldEngineSize);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#hasBoat
     */
     
    /**
     * Gets all property values for the hasBoat property.<p>
     * 
     * @returns a collection of values for the hasBoat property.
     */
    Collection<? extends Integer> getHasBoat();

    /**
     * Checks if the class has a hasBoat property value.<p>
     * 
     * @return true if there is a hasBoat property value.
     */
    boolean hasHasBoat();

    /**
     * Adds a hasBoat property value.<p>
     * 
     * @param newHasBoat the hasBoat property value to be added
     */
    void addHasBoat(Integer newHasBoat);

    /**
     * Removes a hasBoat property value.<p>
     * 
     * @param oldHasBoat the hasBoat property value to be removed.
     */
    void removeHasBoat(Integer oldHasBoat);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#hasSails
     */
     
    /**
     * Gets all property values for the hasSails property.<p>
     * 
     * @returns a collection of values for the hasSails property.
     */
    Collection<? extends Boolean> getHasSails();

    /**
     * Checks if the class has a hasSails property value.<p>
     * 
     * @return true if there is a hasSails property value.
     */
    boolean hasHasSails();

    /**
     * Adds a hasSails property value.<p>
     * 
     * @param newHasSails the hasSails property value to be added
     */
    void addHasSails(Boolean newHasSails);

    /**
     * Removes a hasSails property value.<p>
     * 
     * @param oldHasSails the hasSails property value to be removed.
     */
    void removeHasSails(Boolean oldHasSails);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#requiresCrew
     */
     
    /**
     * Gets all property values for the requiresCrew property.<p>
     * 
     * @returns a collection of values for the requiresCrew property.
     */
    Collection<? extends Integer> getRequiresCrew();

    /**
     * Checks if the class has a requiresCrew property value.<p>
     * 
     * @return true if there is a requiresCrew property value.
     */
    boolean hasRequiresCrew();

    /**
     * Adds a requiresCrew property value.<p>
     * 
     * @param newRequiresCrew the requiresCrew property value to be added
     */
    void addRequiresCrew(Integer newRequiresCrew);

    /**
     * Removes a requiresCrew property value.<p>
     * 
     * @param oldRequiresCrew the requiresCrew property value to be removed.
     */
    void removeRequiresCrew(Integer oldRequiresCrew);



    /* ***************************************************
     * Property http://www.co7516coursework1.com/jl571/OntologyJl571.rdf#sleepingSpaces
     */
     
    /**
     * Gets all property values for the sleepingSpaces property.<p>
     * 
     * @returns a collection of values for the sleepingSpaces property.
     */
    Collection<? extends Integer> getSleepingSpaces();

    /**
     * Checks if the class has a sleepingSpaces property value.<p>
     * 
     * @return true if there is a sleepingSpaces property value.
     */
    boolean hasSleepingSpaces();

    /**
     * Adds a sleepingSpaces property value.<p>
     * 
     * @param newSleepingSpaces the sleepingSpaces property value to be added
     */
    void addSleepingSpaces(Integer newSleepingSpaces);

    /**
     * Removes a sleepingSpaces property value.<p>
     * 
     * @param oldSleepingSpaces the sleepingSpaces property value to be removed.
     */
    void removeSleepingSpaces(Integer oldSleepingSpaces);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
